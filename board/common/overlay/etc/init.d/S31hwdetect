#!/bin/bash

HW_CONF=/var/run/hardware.conf
USER_HW_CONF=/data/etc/hardware.conf

ECC_ADDRESS=0x60
ECC_SLOT=0
LGW_RESET_GPIO=17
HAS_LED_STRIP=false
PAIR_BUTTON_GPIO=
PAIR_BUTTON_ACTIVE_LEVEL=1
PAIR_LED_GPIO=
PAIR_LED_ACTIVE_LEVEL=1
FAN_GPIO=
FAN_ACTIVE_LEVEL=1
SPI_DEV=/dev/spidev0.0
I2C_BUS=1

EXPANDER_GPIO=13
OG_LGW_RESET_GPIO=25


test -n "${OS_VERSION}" || source /etc/init.d/base

VENDOR_CONF=/etc/vendors/${OS_PREFIX}.conf

tweak_nbra() {
    # Enable button internal pull-up on GPIO26
    raspi-gpio set 26 pu
}

start() {
    msg_begin "Detecting hardware"

    # Vendor settings override defaults
    test -s ${VENDOR_CONF} && source ${VENDOR_CONF}

    # Enable GPIO expander that is present on OG and RAK models
    gpio.sh ${EXPANDER_GPIO} 1
    usleep 100000
    
    # Detect I2C peripherals
    HAS_EXPANDER=false
    HAS_GPS=false
    i2c_output=$(i2cdetect -y ${I2C_BUS} | awk -F: '{print $2}')
    grep -q 20 <<< "${i2c_output}" && HAS_EXPANDER=true
    grep -q 42 <<< "${i2c_output}" && HAS_GPS=true
    grep -q 58 <<< "${i2c_output}" && ECC_ADDRESS=0x58
    grep -q 60 <<< "${i2c_output}" && ECC_ADDRESS=0x60

    # OG models have GPS and use a different GPIO for reset
    if [[ ${HAS_GPS} == true ]]; then
        LGW_RESET_GPIO=${OG_LGW_RESET_GPIO}
    fi

    # Some ECC models are on 0x58 and have slots 0 and 1 preprovisioned
    if [[ ${ECC_ADDRESS} == 0x58 ]]; then
        ECC_SLOT=2
    fi
    
    # User settings override detected ones
    test -s ${USER_HW_CONF} && source ${USER_HW_CONF}
    
    {
        echo "HAS_GPS=${HAS_GPS}"
        echo "ECC_ADDRESS=${ECC_ADDRESS}"
        echo "ECC_SLOT=${ECC_SLOT}"
        echo "HAS_EXPANDER=${HAS_EXPANDER}"
        echo "HAS_LED_STRIP=${HAS_LED_STRIP}"
        echo "LGW_RESET_GPIO=${LGW_RESET_GPIO}"
        echo "PAIR_BUTTON_GPIO=${PAIR_BUTTON_GPIO}"
        echo "PAIR_BUTTON_ACTIVE_LEVEL=${PAIR_BUTTON_ACTIVE_LEVEL}"
        echo "PAIR_LED_GPIO=${PAIR_LED_GPIO}"
        echo "PAIR_LED_ACTIVE_LEVEL=${PAIR_LED_ACTIVE_LEVEL}"
        echo "FAN_GPIO=${FAN_GPIO}"
        echo "FAN_ACTIVE_LEVEL=${FAN_ACTIVE_LEVEL}"
        echo "SPI_DEV=${SPI_DEV}"
        echo "I2C_BUS=${I2C_BUS}"
    } > ${HW_CONF}
    
    # Turn on the fan
    if [[ -n "${FAN_GPIO}" ]]; then
        test ${FAN_ACTIVE_LEVEL} == 1 && l=dh || l=dl
        raspi-gpio set ${FAN_GPIO} op ${l}
    fi

    # Vendor-specific tweaks
    tweak_func=tweak_${OS_PREFIX}
    if [[ $(type -t ${tweak_func}) == function ]]; then
        ${tweak_func}
    fi

    msg_done
}

case "$1" in
    start)
        start
        ;;

    stop)
        ;;
    
    *)
        echo "Usage: $0 {start}"
        exit 1
        ;;
esac

exit $?
