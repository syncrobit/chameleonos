#!/bin/bash

LED_STRIP="/usr/bin/ledstrip"
LOG="/var/log/led_state.log"
STATE_FILE="/var/run/led_state"
PAIRING_FILE="/var/run/pairing"
PAUSE_FILE="/var/run/led_pause"
PID_FILE="/var/run/led_strip.pid"
HW_CONF="/var/run/hardware.conf"
NETWORK_TIMEOUT=30

SYS_CONF="/etc/ledstrip.conf"
CONF="/data/etc/ledstrip.conf"


test -n "${OS_VERSION}" || source /etc/init.d/base

# Defaults
LED_STRIP_BRIGHTNESS=50
LED_STRIP_OK_COLOR=green
test -s ${SYS_CONF} && source ${SYS_CONF}
test -s ${CONF} && source ${CONF}

declare -A STATE_COLORS=( \
    [powered_up]=white \
    [ip_ready]=yellow \
    [miner_syncing]=orange \
    [lora_ready]=${LED_STRIP_OK_COLOR} \
    [updating_firmware]=cyan \
    [no_net]=yellow \
    [panic]=red \
    [rebooting]=magenta \
)

declare -A STATE_PATTERNS=( \
    [powered_up]=fade \
    [ip_ready]=steady \
    [miner_syncing]=progress \
    [lora_ready]=steady \
    [updating_firmware]=fade \
    [no_net]=fade \
    [panic]=fade \
    [rebooting]=fade \
)

PAIRING_COLOR=blue


function has_network() {
    result=$(ip route get 1.1.1.1 2>/dev/null)
    test -n "${result}" || return 1
}

function get_state() {
    if [[ -f ${PAUSE_FILE} ]]; then
        echo "pause"
    elif [[ -s /tmp/rcK.pid ]] && kill -0 $(cat /tmp/rcK.pid) &>/dev/null; then
        echo "rebooting"
    elif [[ -f /var/run/panic_generated ]]; then
        echo "panic"
    elif ! [[ $(fwupdate status) =~ ^idle|error.*$ ]]; then
        echo "updating_firmware"
    elif netstat -anup | grep -q "1680.*pkt_fwd"; then
        echo "lora_ready"
    elif ps aux | grep snapshot | grep -qv grep; then
        echo "miner_syncing"
    elif has_network; then
        echo "ip_ready"
    elif [[ $(cat /proc/uptime | grep -oE '^[[:digit:]]+') -gt ${NETWORK_TIMEOUT} ]]; then
        echo "no_net"
    else
        echo "powered_up"
    fi
    return 0
}

function is_pairing() {
    test -f ${PAIRING_FILE}
}

function get_fixed_colors() {
    pairing=off
    is_pairing && pairing=${PAIRING_COLOR}
    echo "off off off off off ${pairing}"
}

function state_loop() {
    while ! [[ -f ${HW_CONF} ]]; do  # Wait for hardware config to be ready
        sleep 1
    done
    sleep 1  # Allow another second for data to be written to HW_CONF
    source ${HW_CONF}
    
    test -n "${PAIR_LED_ACTIVE_LEVEL}" && pair_led_inactive_level=$(( 1 - ${PAIR_LED_ACTIVE_LEVEL} ))

    renice -10 ${BASHPID}  # Run LEDs with high prio
    echo > ${STATE_FILE}
    while true; do
        test -f ${STATE_FILE} || break  # Removing the file exits loop
        old_state=$(cat ${STATE_FILE})
        new_state=$(get_state)
        if [[ "${old_state}" != "${new_state}" ]]; then
            # Only write new state to file if changed, to prevent unnecessary (e)MMC writes
            echo "${new_state}" > ${STATE_FILE}
            echo "state is ${new_state}"
        fi
        if [[ "${HAS_LED_STRIP}" == true ]] && [[ "${new_state}" != pause ]]; then
            color=${STATE_COLORS[${new_state}]}
            pattern=${STATE_PATTERNS[${new_state}]}
            
            if [[ "${pattern}" == "fade" ]]; then
                ${LED_STRIP} fadein ${LED_STRIP_BRIGHTNESS} ${color} $(get_fixed_colors)
                ${LED_STRIP} fadeout ${LED_STRIP_BRIGHTNESS} ${color} $(get_fixed_colors)
            elif [[ "${pattern}" == "progress" ]]; then
                ${LED_STRIP} progresslr ${LED_STRIP_BRIGHTNESS} ${color} $(get_fixed_colors)
                usleep 100000
            else  # Assuming "steady"
                fixed_colors=$(get_fixed_colors)
                pattern=${fixed_colors//off/${color}}
                ${LED_STRIP} pattern ${LED_STRIP_BRIGHTNESS} ${pattern}
                sleep 2
            fi
        elif [[ -n "${PAIR_LED_GPIO}" ]]; then
            if is_pairing; then
                gpio-do set ${PAIR_LED_GPIO} ${PAIR_LED_ACTIVE_LEVEL}
                usleep 500000
                gpio-do set ${PAIR_LED_GPIO} ${pair_led_inactive_level}
                usleep 500000
            else
                gpio-do set ${PAIR_LED_GPIO} ${pair_led_inactive_level}
            fi
        else
            sleep 1
        fi
    done
}

function start() {
    msg_begin "Staring LED state manager"
    state_loop &>>${LOG} &
    echo $! > ${PID_FILE}
    msg_done
}

function stop() {
    msg_begin "Stopping LED state manager"
    rm -f ${STATE_FILE}

    if [[ -s ${PID_FILE} ]]; then
        pid=$(cat ${PID_FILE})
        
        # Wait for state loop to exit
        count=0
        while kill -0 ${pid} 2>/dev/null && [[ ${count} -lt 30 ]]; do
            usleep 100000
            count=$((count + 1))
        done
        
        # Kill any remaining process with SIGKILL
        kill -9 ${pid} &>/dev/null
        ps | grep $(basename ${LED_STRIP}) | grep -v grep | tr -s ' ' | sed -e 's/^\s//' | cut -d ' ' -f 1 | xargs -r kill -9
        ps | grep ledstate | grep -v $$ | grep -v grep | tr -s ' ' | sed -e 's/^\s//' | cut -d ' ' -f 1 | xargs -r kill -9
        rm -f ${PID_FILE}
    fi

    msg_done
}

case "$1" in
    start)
        start
        ;;

    stop)
        stop
        ;;

    restart)
        stop
        start
        ;;

    *)
        echo "Usage: $0 {start|stop|restart}"
        exit 1
esac

exit 0  # Always exit successfully, even if LED program crashes
