import subprocess
import time

import pyatecc


ECC_DEF_ADDRESS = 0x60
ECC_DEF_SLOT = 0
ECC_DEF_BUS = 1
ECC_RETRIES = 10
ECC_SLEEP = 0.5


_ecc_address = None
_ecc_bus = None
_ecc_slot = None
_ecc = None


def get_ecc_address():
    global _ecc_address
    if _ecc_address is None:
        with open('/var/run/hardware.conf', 'rt') as f:
            for line in f:
                line = line.strip()
                if not line:
                    continue
                
                parts = line.split('=', 1)
                if len(parts) < 2:
                    continue
                
                key, value = parts
                if key == 'ECC_ADDRESS':
                    _ecc_address = int(value, 16)
                    break
            
            else:
                _ecc_address = ECC_DEF_ADDRESS

    return _ecc_address


def get_ecc_bus():
    global _ecc_bus
    if _ecc_bus is None:
        with open('/var/run/hardware.conf', 'rt') as f:
            for line in f:
                line = line.strip()
                if not line:
                    continue
                
                parts = line.split('=', 1)
                if len(parts) < 2:
                    continue
                
                key, value = parts
                if key == 'ECC_BUS':
                    _ecc_bus = int(value)
                    break
            
            else:
                _ecc_bus = ECC_DEF_BUS

    return _ecc_bus


def get_ecc_slot():
    global _ecc_slot
    if _ecc_slot is None:
        with open('/var/run/hardware.conf', 'rt') as f:
            for line in f:
                line = line.strip()
                if not line:
                    continue
                
                parts = line.split('=', 1)
                if len(parts) < 2:
                    continue
                
                key, value = parts
                if key == 'ECC_SLOT':
                    _ecc_slot = int(value)
                    break
            
            else:
                _ecc_slot = ECC_DEF_SLOT

    return _ecc_slot


def get_ecc():
    global _ecc
    if _ecc is None:
        _ecc = pyatecc.ATECC(get_ecc_bus(), get_ecc_address())
    
    return _ecc


def get_ecc_serial_number():
    for _ in range(ECC_RETRIES):
        try:
            return get_ecc().serial_number.lower()

        except RuntimeError:
            time.sleep(ECC_SLEEP)
    
    raise RuntimeError('Timeout when talking to ECC')


def get_ecc_pub_key():
    slot = get_ecc_slot()
    for _ in range(ECC_RETRIES):
        try:
            return get_ecc().gen_key(slot)

        except RuntimeError:
            time.sleep(ECC_SLEEP)
    
    raise RuntimeError('Timeout when talking to ECC')


def ecc_sign(data):
    ecc = get_ecc()
    return ecc.ecdsa_sign(get_ecc_slot(), data)


def get_unit_serial_number():
    return subprocess.check_output('/etc/init.d/boardsn', shell=True).decode().strip()
